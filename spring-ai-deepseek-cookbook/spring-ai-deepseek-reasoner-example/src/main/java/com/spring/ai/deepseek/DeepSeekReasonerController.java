package com.spring.ai.deepseek;


import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.deepseek.DeepSeekAssistantMessage;
import org.springframework.ai.deepseek.DeepSeekChatModel;
import org.springframework.ai.deepseek.DeepSeekChatOptions;
import org.springframework.ai.deepseek.api.DeepSeekApi;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


/**
 * 基于 DeepSeek 推理模型（deepseek-reasoner）实现的控制器。
 *
 * @author 寻道AI小兵
 */
@RestController
@RequestMapping("/deepSeekReasoner")
public class DeepSeekReasonerController {

    private final DeepSeekChatModel chatModel;

    @Autowired
    public DeepSeekReasonerController(DeepSeekChatModel chatModel) {
        this.chatModel = chatModel;
    }

    /**
     * 获取 DeepSeek 推理模型的推理结果。
     * 演示如何访问 deepseek-reasoner 生成的 CoT（思维链）内容。
     *
     * @return void（当前方法未返回值，仅演示调用过程）
     */
    @GetMapping("/chat")
    public ReasoningResult deepSeekReasonerExample(@RequestParam String message) {
        DeepSeekChatOptions promptOptions = DeepSeekChatOptions.builder()
                .model(DeepSeekApi.ChatModel.DEEPSEEK_REASONER.getValue())
                .build();
        //"9.11 and 9.8, which is greater?"
        Prompt prompt = new Prompt(message, promptOptions);
        ChatResponse response = chatModel.call(prompt);

        // Get the CoT content generated by deepseek-reasoner, only available when using deepseek-reasoner model
        DeepSeekAssistantMessage deepSeekAssistantMessage = (DeepSeekAssistantMessage) response.getResult().getOutput();
        String reasoningContent = deepSeekAssistantMessage.getReasoningContent();
        System.out.println("CoT content: " + reasoningContent);
        String text = deepSeekAssistantMessage.getText();
        System.out.println("Answer: " + text);
        return new ReasoningResult(text, reasoningContent);
    }

}